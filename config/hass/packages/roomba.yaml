vacuum:
  - platform: roomba
    name: Nimbus
    host: !secret roomba_hostname
    username: !secret roomba_username
    password: !secret roomba_password
    continuous: True


input_datetime:
  roomba_autostart_time:
    name: Roomba autostart time
    has_date: false
    has_time: true
    initial: '14:00'


binary_sensor:
  - platform: template
    sensors:
      roomba_bin_full:
        friendly_name: Roomba Bin Full
        value_template: '{{ states.vacuum.nimbus.attributes.bin_full }}'


sensor:
  - platform: template
    sensors:
      nimbus_status:
        friendly_name: 'Nimbus Status'
        value_template: '{{ states.vacuum.nimbus.attributes.status }}'


script:
  roomba_start:
    alias: 'Start Roomba'
    sequence:
      - service: vacuum.turn_on
        data:
          entity_id: vacuum.nimbus

  roomba_stop:
    alias: 'Stop Roomba'
    sequence:
      - service: vacuum.turn_off
        data:
          entity_id: vacuum.nimbus


alert:
  bin_full:
    name: "The bin is full"
    entity_id: binary_sensor.roomba_bin_full
    state: "on"
    repeat: 7200
    can_acknowledge: True
    skip_first: False
    notifiers:
      - roomba_bin_full


automation:
  - alias: Set Arlo to Roomba mode when cleaning is in progress
    initial_state: true
    trigger:
      platform: state
      entity_id: vacuum.nimbus
      to: "on"
    action:
      - service: script.arlo_roomba
      - service: homeassistant.turn_off
        data:
          entity_id: group.modect

  - alias: Reset arlo mode and motion detection when roomba has finished cleaning
    initial_state: true
    trigger:
      platform: state
      entity_id: vacuum.nimbus
      to: "off"
    action:
      - service: script.turn_off_lights_if_we_are_away
      - delay: '00:00:10'
      - service_template: >
          {% if is_state('alarm_control_panel.ha_alarm_mqtt', 'disarmed') %}
            script.arlo_disarm
          {% elif is_state('alarm_control_panel.ha_alarm_mqtt', 'armed_away') %}
            script.arlo_arm
          {% elif is_state('alarm_control_panel.ha_alarm_mqtt', 'armed_home') %}
            script.arlo_home
          {% endif %}
      - service_template: >
          {% if is_state('alarm_control_panel.ha_alarm_mqtt', 'disarmed') %}
            homeassistant.turn_off
          {% elif is_state('alarm_control_panel.ha_alarm_mqtt', 'armed_away') %}
            homeassistant.turn_on
          {% elif is_state('alarm_control_panel.ha_alarm_mqtt', 'armed_home') %}
            homeassistant.turn_off
          {% endif %}
        data:
          entity_id: group.modect

  - alias: Schedule cleaning when nobody is home
    initial_state: true
    trigger:
      platform: template
      value_template: '{{ states.sensor.time.state == (states.input_datetime.roomba_autostart_time.attributes.timestamp | int | timestamp_custom("%H:%M", False)) }}'
    condition:
      - condition: and
        conditions:
          - condition: state
            entity_id: group.main_mobile_devices
            state: not_home
          - condition: state
            entity_id: input_boolean.vacation
            state: 'off'
    action:
      - service: vacuum.turn_on
        data:
          entity_id: vacuum.nimbus

  - alias: Ask whether to start cleaning if somebody is home at the programmed time
    initial_state: true
    trigger:
      platform: template
      value_template: '{{ states.sensor.time.state == (states.input_datetime.roomba_autostart_time.attributes.timestamp | int | timestamp_custom("%H:%M", False)) }}'
    condition:
      - condition: state
        entity_id: group.main_mobile_devices
        state: home
    action:
      - service: notify.html5
        data:
          message: "Start the roomba anyway? (someone is home)"
          data:
            tag: 'roomba-force-start'
            actions:
              - action: roomba_force_start
                icon: https://materialdesignicons.com/api/download/icon/png/E091C285-7AA8-4907-9398-EBFDAC7A179D/48
                title: "Start cleaning"

  - alias: "HTML5 notification: Roomba force start"
    initial_state: true
    trigger:
      platform: event
      event_type: html5_notification.clicked
      event_data:
        action: roomba_force_start
    action:
      - service: vacuum.turn_on
        data:
          entity_id: vacuum.nimbus

  - alias: "Stop cleaning procedure if any of us comes home"
    initial_state: true
    trigger:
      - platform: state
        entity_id: group.main_mobile_devices
        to: home
    condition:
      - condition: state
        entity_id: vacuum.nimbus
        state: 'on'
    action:
      - service: vacuum.return_to_base
        data:
          entity_id: vacuum.nimbus

  - alias: "Notify when roomba is stuck and I'm coming home"
    initial_state: true
    trigger:
      - platform: state
        # entity_id: device_tracker.google_maps_111748235994603810778
        entity_id: group.pschmitt_location
        to: home
    condition:
      - condition: template
        value_template: '{{ states.vacuum.nimbus.attributes.status != "Charging" }}'
    action:
      - service: notify.html5
        data_template:
          message: "Nimbus is {{ states.vacuum.nimbus.attributes.status }}. Go rescue him!"
          data:
            tag: "nimbus-rescue"

  - alias: "Notify when roomba finished a job"
    initial_state: true
    trigger:
      - platform: state
        entity_id: sensor.nimbus_status
        to: 'Charging'
    condition:
      condition: template
      value_template: '{{ trigger.from_state.state != "" }}'
    action:
      - service: notify.html5
        data_template:
          message: 'Nimbus has finished a job. He cleaned {{ trigger.from_state.attributes.cleaned_area }}m2 in {{ trigger.from_state.attributes.cleaning_time }}.'
          data:
            tag: 'nimbus-finished-job'


notify:
  - name: roomba_bin_full
    platform: group
    services:
      - service: html5
        data:
          message: "Nimbus' bin is full"
          data:
            tag: 'bin-full'
            renotify: True


homeassistant:
  customize:
    vacuum.nimbus:
      icon: mdi:robot-vacuum
    script.roomba_start:
      icon: mdi:robot-vacuum
    script.roomba_stop:
      icon: mdi:stop

# vim: set filetype=yaml et sw=2 ts=2 :
